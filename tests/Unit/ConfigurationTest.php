<?php

namespace Tests\Unit;

use Webulator\Contracts\Configuration;
use Webulator\Exceptions\ConfigurationLoadException;
use Webulator\Exceptions\ContainerResolveException;

class ConfigurationTest extends BaseTest
{
    /**
     * @var Configuration
     */
    private $config;

    /**
     * @var string
     */
    private $originalPath;

    /**
     * Resolve Configuration component out of the container.
     *
     * @throws \Exception
     */
    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->config = $this->bootedApp()->resolve(Configuration::class);
        $this->originalPath = getenv("CONFIG_PATH");
    }

    /** @test */
    public function it_can_set_and_get_a_value()
    {
        $this->config->set("test", "value");
        $this->assertEquals("value", $this->config->get("test"));
    }

    /** @test */
    public function it_will_throw_a_proper_error_on_bad_env_entry()
    {
        putenv("CONFIG_PATH=nonexistent");

        try
        {
            $this->bootedApp()->make(Configuration::class);
        }
        catch (ContainerResolveException $exception)
        {
            $this->assertInstanceOf(ConfigurationLoadException::class, $exception->getPrevious());
        }
    }

    /**
     * Reset env values just in case.
     */
    protected function tearDown()
    {
        parent::tearDown();

        putenv("CONFIG_PATH={$this->originalPath}");
    }


}